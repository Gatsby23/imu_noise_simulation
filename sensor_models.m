% This script generates the theoretical AD curves, AD curves from matlab
% IMU object and the AD curves generated from the samples generated by 
% corrupt_with_sensor_noise function. The IMU model parameters
% obtained from yaml files and the simulation case selected. 
% Saves the results in 'simulation_results/sensor_models_ad.mat'.
% It takes a while to compute everything, so be patient while the script
% runs. 

% NOTE:: Parameters from the stationary.yaml in sim_params are changed 
% inside the script: 
% Sim_Params.TotalTime, Sim_Params.model_type

% To run this
% script, type on command line 
% >> sensor_models
% Other m-files required: compute_theoretical_AD_curve.m,
%                         simulate_motion.m
%                         YAML folder to read yaml files. 
% Subfunctions: None
% MAT-files required: none
% Yaml-files required: 1) In folder IMU_params/test_imu_models/
%                      2) In folder Sim_params/test_motion - stationary.yaml

% Author: Jagatpreet Nir
% Work address: Northeastern Field Robotics Lab
% email: nir.j@northeastern.edu
% Website: http://www.
% Sept 2020; Last revision: 03-Nov-2020

clear all;
close all;
global g_world
g_world = [0;0;-9.8098];
script_paths;
imu_parameter_folder = 'IMU_params/test_imu_models/';
sim_parameter_filepath = 'Sim_params/test_motion/stationary.yaml';

simulation_case = struct('w_acc',1,... %1
                         'b_acc',1,... %2
                         'p_acc',1,... %3
                         'p_acc_1',0,...
                         'w_gyro',0,...%4
                         'b_gyro',0,...%5
                         'p_gyro',0,...%6
                         'wb_acc',0,...%7
                         'wb_acc_gyro',0,...%8
                         'wbp_acc',1,...%9
                         'wbp_acc_1',0,...
                         'wbp_acc_gyro',0); %10
                     
f = fieldnames(simulation_case);
a = [];
for k = 1:length(f)
    f_ = getfield(simulation_case,f{k});
    if  f_ == 1
        a = [a,f(k)];
    end
end
f = a;


for i = 1:length(f)
    imu_parameter_file = strcat('sim_test_imu_',f(i),'.yaml');
    imu_parameter_filepath{i} = fullfile(imu_parameter_folder,imu_parameter_file{1});
    imu_Params{i} = YAML.read(imu_parameter_filepath{i});
    Sim_Params = YAML.read(sim_parameter_filepath);
    
    % Sim
    Sim_Params.TotalTime = 5*60*60; % 5 hour stationary data.

    [adev{i,1},tau{i,1}] = compute_theoretical_AD_curve(imu_Params{i},'a');
    
    % With model p ; first column stores the non-matlab model
    m = 2.^(3:18); 
    Sim_Params.model_type = 'p';
    [t,accel_readings,gyro_readings,nw,b{i,1}] = simulate_motion(imu_Params{i},...
                                                             Sim_Params);
    [avar,tau{i,2}] = allanvar(accel_readings(:,1),m,Sim_Params.SamplingRate);  
    adev{i,2} = sqrt(avar);
    
    % With model m : second column stores the matlab model
    Sim_Params.model_type = 'm';
    [t,accel_readings,gyro_readings] = simulate_motion(imu_Params{i},...
                                                             Sim_Params);
    
    [avar,tau{i,3}] = allanvar(accel_readings(:,1),m,Sim_Params.SamplingRate);
    adev{i,3} = sqrt(avar);
end
save('simulation_results/sensor_models_ad.mat');